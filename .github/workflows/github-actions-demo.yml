name: Deploy Guides

on:
  push:
    tags:
      '**'

jobs:
  deploy-guides:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Calculate SHA256 for *.webp files
      run: |
        mkdir -p hashed-files
        for file in $(find . -name "*.webp"); do
          sha=$(sha256sum "$file" | awk '{print $1}')
          cp "$file" "hashed-files/$sha.webp"
        done

    - name: Upload files via SCP
      env:
        SCP_TARGET: ${{ secrets.SCP_TARGET }}
        SCP_USER: ${{ secrets.SCP_USER }}
        SCP_PRIVATE_KEY: ${{ secrets.SCP_PRIVATE_KEY }}
      run: |
        echo "$SCP_TARGET" 
        mkdir -p ~/.ssh
        echo "$SCP_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "StrictHostKeyChecking=no" >> ~/.ssh/config
        scp -i ~/.ssh/id_rsa hashed-files/* "$SCP_USER@$SCP_TARGET:/home/azureuser/static/"

    - name: Generate JSON from .webp files
      run: |
        touch $output.json
        output_json="output.json"
        echo "[" > $output_json
        echo "$output_json" 

        # List only first-level directories
        echo "Directory structure:"
        tree -L 3
        interfaces=$(find . -mindepth 1 -maxdepth 1 -type d | sed 's|./||g')
        echo "$output_json" 
        for interface_path in $interfaces; do
          interface_name=$(echo "$interface_path" | awk '{print tolower($0)}') # Convert to lowercase
          if [[ "$interface_name" == _* ]]; then
            echo "  {" >> $output_json
            echo "    \"interface\": \"$interface_name\"," >> $output_json
            echo "$interface_name"
            echo "    \"topic\": [" >> $output_json
          
            topics=$(find "$interface_path" -mindepth 1 -maxdepth 1 -type d)
            for topic_path in $topics; do
              topic_name=$(basename "$topic_path" | sed -E 's/_/ /g')
              echo "      {" >> $output_json
              echo "        \"name\": \"$topic_name\"," >> $output_json
              echo "$topic_name"
              echo "        \"content\": [" >> $output_json
              
              files=$(find "$topic_path" -type f -name "*.webp")
              for file in $files; do
                sha=$(sha256sum "$file" | awk '{print $1}')
                filename=$(basename "$file" .webp)
                content_name=$(echo "$filename" | sed 's/^[^-]*-\([^-]*\)-.*$/\1/' | xargs)
                component=$(echo "$filename" | cut -d'_' -f3-)
                
                echo "          {" >> $output_json
                echo "            \"name\": \"$content_name\"," >> $output_json
                echo "content_name"
                echo "$content_name"
                echo "            \"component\": \"$component\"," >> $output_json
                echo "$component"
                echo "            \"object\": \"$sha\"" >> $output_json
                echo "$sha"
                echo "          }," >> $output_json
              done
              
              # Remove trailing comma from content
              sed -i '$ s/,$//' $output_json
              echo "        ]" >> $output_json
              echo "      }," >> $output_json
            done
          fi

          # Remove trailing comma from topics
          sed -i '$ s/,$//' $output_json
          echo "    ]" >> $output_json
          echo "  }," >> $output_json
        done

        echo "done"

        # Remove trailing comma from interfaces
        sed -i '$ s/,$//' $output_json
        echo "]" >> $output_json

        cat $output_json

    - name: Embed JSON in the Git Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        tag_name=$(echo "${GITHUB_REF##*/}")
        git add output.json
        git commit -m "Add JSON file with tag data" 
        # Create the tag pointing to the current commit
        git tag -f -a "$tag_name" -m "Tag with JSON data"
        git push origin HEAD:main
        git push --force origin "$tag_name"
        
    - name: Clean up
      run: rm -rf hashed-files output.json
